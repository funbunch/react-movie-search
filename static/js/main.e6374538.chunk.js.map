{"version":3,"sources":["searchMovie.js","App.js","serviceWorker.js","index.js"],"names":["SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","console","log","results","filter","movie","poster_path","error","className","htmlFor","onSubmit","type","name","placeholder","value","onChange","target","map","i","key","class","src","alt","title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sOAyDeA,MAtDf,WAAwB,MAGIC,mBAAS,IAHb,mBAGfC,EAHe,KAGRC,EAHQ,OAIMF,mBAAS,IAJf,mBAIfG,EAJe,KAIPC,EAJO,KAMhBC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACnBD,EAAEE,iBAGIC,EAJa,kHAIoGR,EAJpG,iDAOCS,MAAMD,GAPP,cAOXE,EAPW,gBAQEA,EAAIC,OARN,OAQXC,EARW,OASjBC,QAAQC,IAAI,QAASF,GACfV,EAASU,EAAKG,QAAQC,QAAO,SAACC,GAClC,OAAOA,EAAMC,eAEff,EAAUD,GAbO,kDAefW,QAAQM,MAAR,MAfe,0DAAH,sDAoBlB,OADAN,QAAQC,IAAI,SAAUZ,GAEpB,oCACE,yBAAKkB,UAAU,gCACf,2BAAOA,UAAU,gBAAgBC,QAAQ,SAAzC,cACA,0BAAMD,UAAU,cAAcE,SAAUlB,GACtC,2BAAOgB,UAAU,4BAA4BG,KAAK,OAAOC,KAAK,QAAQC,YAAY,UAAUC,MAAO1B,EAAO2B,SAAU,SAACtB,GAAD,OAAOJ,EAASI,EAAEuB,OAAOF,UAC7I,4BAAQH,KAAK,SAASH,UAAU,gCAAhC,WAEF,yBAAKA,UAAU,sBACZlB,EAAO2B,KAAI,SAACZ,EAAOa,GAAR,OACV,yBAAKC,IAAG,qBAAgBD,GAAKV,UAAU,sCACrC,yBAAKY,MAAM,iBACT,yBAAKZ,UAAU,6BACba,IAAG,0CAAqChB,EAAMC,aAAegB,IAAKjB,EAAMkB,MAAQ,YAEhF,sCAAYlB,EAAMkB,gBC/BnBC,MATf,WACE,OACE,yBAAKhB,UAAU,aACb,wBAAIA,UAAU,aAAd,sBACF,kBAAC,EAAD,QCIgBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLN,QAAQM,MAAMA,EAAMkC,a","file":"static/js/main.e6374538.chunk.js","sourcesContent":["import React, {useState} from 'react';\n// import { filter } from 'ramda';\n\nfunction SearchMovies() {\n\n  //states- input query, movies\n  const [query, setQuery] = useState(''); \n  const [movies, setMovies] = useState([]);\n  \n  const searchMovies = async (e) => {\n    e.preventDefault();\n\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=e1d4cd7a72e42e432324ccb18474dc56&language=en-US&query=${query}&page=1&include_adult=false`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(\"Data:\", data)\n      const movies = data.results.filter((movie) => {\n        return movie.poster_path\n      })\n      setMovies(movies)\n    } catch(err) {\n        console.error(err);\n      }\n    \n  }\n  console.log(\"Movies\", movies);\n  return (\n    <>\n      <nav className=\"navbar navbar-light bg-light\">\n      <label className=\"label mb-sm-2\" htmlFor=\"query\">Movie Name</label>\n      <form className=\"form-inline\" onSubmit={searchMovies}>\n        <input className=\"form-control mr-sm-2 mb-2\" type=\"text\" name=\"query\" placeholder=\"Top Gun\" value={query} onChange={(e) => setQuery(e.target.value)} />\n        <button type=\"submit\" className=\"btn btn-outline-success mb-2\">Search</button>\n      </form>\n      <div className=\"card-list row pt-3\">\n        {movies.map((movie, i) => ( \n          <div key={`movie-card-${i}`} className=\"col-12 col-sm-6 col-md-4 col-lg-3 \">\n            <div class=\"card mb-4 p-2\">\n              <img className=\"card--image img-fluid mb-2\"\n                src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title + ' poster'}\n                />\n                <h5>Title: {movie.title}</h5>\n\n            </div>\n          </div>\n      \n     \n        ))}\n      </div>\n      </nav>\n    </>\n  )\n}\n\nexport default SearchMovies;","import React from 'react';\nimport \"./styles.css\";\nimport SearchMovies from './searchMovie';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title row\">React Movie Search</h1>\n    <SearchMovies />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"./styles.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}